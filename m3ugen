#!/usr/bin/perl

# m3ugen - Recursive, multi-format m3u generation tool
# (c) 2004-2009 Alex Malinovich (demonbane@the-love-shack.net)
# Released under the GPL
# See www.fsf.org for a full copy of the GPL.

# NOTE: This version of m3ugen relies on non-upstream changes to
#	libaudio-file-perl (Audio::File). These changes are
#	available in the forked version of the library available
#	at http://github.com/demonbane/audio-file/tree/master

$version="0.19";

use Audio::File;
use Cwd;
use Encode;
use File::Basename;
use File::Find;
use Getopt::Mixed 1.006;
use IO::Handle;
use Term::ReadKey;

($termwidth)=GetTerminalSize(STDERR);
$splitline="-" x $termwidth;

Getopt::Mixed::init("r recursive>r n no-path>n h help>h usage>h d debug>d D stdebug>D a albums>a v version>v p=s pattern>p A append>A");
$Getopt::Mixed::ignoreCase = 0;
Getopt::Mixed::getOptions();

if ($opt_h) {
  print "Usage: m3ugen [OPTION]... SOURCE [M3UFILE]\n";
  print "Output an m3u playlist containing FLAC, MP3, MP4 and Ogg Vorbis files found in\n";
  print "SOURCE to M3UFILE if specified, STDOUT otherwise.\n\n";
  print "PATTERN specifies the pattern to use when writing the M3U info line using\n";
  print "the following variables: %a = artist, %t = track title, %n = track number\n";
  print "                         %b = album, %d = disc number [if available]\n\n";
  print "  -r, --recursive    recursively search through directories\n";
  print "                     (default is specified directory ONLY)\n\n";
  print "  -a, --albums       create ALBUMNAME.m3u for each album in SOURCE\n";
  print "                     (implies M3UFILE behavior and ignores M3UFILE if specified)\n\n";
  print "  -n, --no-path      print paths relative to SOURCE\n";
  print "                     (default is to print full path)\n\n";
  print "  -p PATTERN,        quoted pattern to use for printing title in M3UFILE\n";
  print "  --pattern=PATTERN  (Examples: '%n - %t' or '%a.%b.%t')\n\n";
  print "  -A, --append       append to existing M3UFILE instead of overwriting\n\n";
  print "  -d, --debug        print debugging output to STDERR\n";
  print "  -D, --stdebug      print debugging output to STDOUT\n\n";
  print "  -h, --help         display this screen and exit\n\n";
  print "  -v, --version      print version information and exit\n\n";
  exit 0;
}

if ($opt_v) {
  print "m3ugen $version\n";
  exit 0;
}

if ($opt_A) {
  $openmode = ">>:utf8";
  $needextm3u = 0;
}else{
  $openmode = ">:utf8";
  $needextm3u = 1;
}

if (!$ARGV[0]) {
  die "Please specify a directory to work on!\n\n";
}elsif (!-d $ARGV[0]) {
  die "Invalid directory!\n\n";
}

if ($ARGV[1]) {
  open(OUTPUT,"$openmode",$ARGV[1]) || die "Could not open $ARGV[1] for writing!\n";
  $outputfilename = $ARGV[1];
  if ($opt_a) {
    print "Album (-a) option was specified along with an output filename.\nIgnoring -a and writing all output to $ARGV[1] instead.\n";
    undef($opt_a);
  }
}else {
  OUTPUT->fdopen(STDOUT, "w") || die "Could not redirect output!\n";
  binmode OUTPUT, ":utf8";
}

open(ERROR,">:utf8", "/dev/null");

if ($opt_d) {
  ERROR->fdopen(STDERR, "w");
  binmode ERROR, ":utf8";
}elsif ($opt_D) {
  ERROR->fdopen(STDOUT, "w");
  binmode ERROR, ":utf8";
}

print ERROR "SOURCE = \"$ARGV[0]\"\nM3UFILE = \"$ARGV[1]\"\n";

$workDir = Cwd::abs_path($ARGV[0])."/";

$currentDir = getcwd();

print ERROR "workDir = $workDir\ncurrentDir = $currentDir\n";

#for creating unique track numbers
$uniq = 1;

if ($opt_r) {
  find(\&wanted, $workDir);
}else {
  chdir($workDir);
  foreach (glob("*.[Oo][Gg][Gg]"),glob("*.[Ff][Ll][Aa][Cc]"),
	   glob("*.[Mm][Pp][34]"),glob("*.[Aa][Aa][Cc]"),
	   glob("*.[Mm]4[Aa]")) {
    my $curfile = $_;
    print ERROR "found file = \"$curfile\"\n";
    push(@files,$workDir.$curfile);
  }
}

foreach $filename (@files) {
  print ERROR "$splitline";
  print ERROR "Processing filename = \"$filename\"\n";
  my $mediaFile = Audio::File->new("$filename");
  print ERROR "Loaded mediaFile\n";
  $artist = $mediaFile->tag->artist();
  print ERROR "Loaded artist (\"$artist\")\n";
  $album = $mediaFile->tag->album();
  print ERROR "Loaded album (\"$album\")\n";
  if (${$mediaFile->tag->all()}{"disc"}) {
    $disc = $mediaFile->tag->disc();
    print ERROR "Loaded disc (\"$disc\")\n";
  }else{
    $disc = undef;
    print ERROR "\"disc\" tag not supported by this version of Audio::File, skipping\n";
  }
  $track = abs($mediaFile->tag->track());
  print ERROR "Loaded track (\"$track\")\n";
  $title = $mediaFile->tag->title();
  print ERROR "Loaded title (\"$title\")\n";
  $length = $mediaFile->audio_properties->length();
  print ERROR "Loaded length (\"$length\")\n";

  # The reason we're checking both track and album at the same time
  # here is because if we don't know the album the user is probably
  # generating a list for a directory of random songs, likely from
  # random albums. In this case, we assign a generic album name and
  # track number.
  #
  # TODO: This could be made more intelligent so that if the album
  # name doesn't exist but the track number does, we use the track
  # number IF it doesn't conflict with another one. If it does, we
  # give it one of the remaining available numbers.
  #
  # TODO: If the album is known but the tracks aren't, we could
  # still keep the album name. This poses problems if the user has
  # used the -a option, as this will open us to the possibility of
  # creating n random playlists. Perhaps finding an album name with
  # no track number will automatically disable the -a option?

  if (!$track || !$album) {
    print ERROR "Unknown album/track name\n";
    print ERROR "Assuming \"Unknown Album Name\" due to \"$album\".\n";
    print ERROR "Assuming track \"".$uniq++."\" due to \"$track\".\n";
    $album = "Unknown Album Name";
    $track = $uniq;
  }

  if (!$disc) {
    print ERROR "Unknown disc number. Assuming 1.\n";
    $disc = 1;
  }

  $m3ulines = "#EXTINF:".$length.","; #default info
  if ($opt_p) {
    my $formattedline = $opt_p;

    $formattedline =~ s/%a/$artist/g;
    $formattedline =~ s/%b/$album/g;
    $formattedline =~ s/%d/$disc/g;
    $formattedline =~ s/%n/$track/g;
    $formattedline =~ s/%t/$title/g;
    $m3ulines .= $formattedline;
  }else{
    $m3ulines .= $artist." - ".$title;
  }
  $m3ulines .= "\n";

  if ($opt_n) {
    $m3ulines .= basename($filename);
  }else {
    # It appears that this function doesn't do the right thing when there's
    # valid UTF before a newline, but invalid UTF AFTER the newline. So we
    # convert the filename separately.
    $m3ulines .= mkvalidutf($filename);
  }
  $m3ulines .= "\n";

  $m3ulines = mkvalidutf($m3ulines);
  $writeme{$album}[$disc - 1][$track - 1] = $m3ulines;
  print ERROR "m3ulines = \"$m3ulines\"\n";
}

foreach $albumname (keys %writeme) {
  if ($opt_a) {
    print ERROR "$splitline";
    print ERROR "Generating -a list\n";
    close OUTPUT;
    open(OUTPUT,"$openmode", "$currentDir/$albumname.m3u") || die "Could not open $albumname.m3u for writing!\n";
    $outputfilename = "$albumname.m3u";
  }else{
    print ERROR "Generating standard list\n";
  }
  if ($needextm3u) {
    print OUTPUT "#EXTM3U\n";
    if (!$opt_a) {
      $needextm3u = 0;
    }
  }
  print ERROR "albumname = \"$albumname\"\n";
  for ($discnumber = 0; $discnumber < ($#{$writeme{$albumname}} + 1); $discnumber++) {
    print ERROR "discnumber = \"".($discnumber+1)."\"\n";
    foreach $songname (@{$writeme{$albumname}[$discnumber]}) {
      print OUTPUT $songname;
    }
  }
  print STDERR "Wrote \"$outputfilename\"\n";
}

close ERROR;
close OUTPUT;

sub wanted {
  my $curfile = $File::Find::name;
  if (-f $curfile) {
    print ERROR "$splitline";
    print ERROR "checking \"$curfile\"\n";
    my @fileParts = split(/\./);
    my $fileExt = lc(pop(@fileParts));
    print ERROR "fileExt = \"$fileExt\"\n";
    if ($fileExt eq "ogg" || $fileExt eq "mp3" || $fileExt eq "flac" ||
	$fileExt eq "aac" || $fileExt eq "m4a" || $fileExt eq "mp4") {
      print ERROR "adding \"$curfile\" to \@files\n";
      push(@files, $curfile);
    }
  }else{
    print ERROR "Skipping invalid file \"$curfile\"\n";
  }
}

sub mkvalidutf {
  print ERROR "mkvalidutf received \"$_[0]\"... ";
  if (!utf8::is_utf8($_[0])) {
    my $decoded = decode_utf8($_[0]);
    print ERROR "converted to \"$decoded\"\n";
    return $decoded;
  }else{
    print ERROR "unchanged.\n";
    return $_[0];
  }
}
